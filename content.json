{"meta":{"title":"KyunLog","subtitle":"DevKyun","description":"쓸쓸하지 않아.. 솔로 주니어 개발자","author":"Kim Min Kyun","url":"http://devkyun.github.io","root":"/"},"pages":[],"posts":[{"title":"[Hexo 블로그 만들기...1]","slug":"Hexo 블로그 만들기...1","date":"2020-03-14T06:41:53.000Z","updated":"2020-03-14T08:43:41.606Z","comments":true,"path":"2020/03/14/Hexo 블로그 만들기...1/","link":"","permalink":"http://devkyun.github.io/2020/03/14/Hexo%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0...1/","excerpt":"","text":"1) 서론취업 준비로 이것저것 준비하다 보니 블로그에 눈이 가서부랴부랴 마크다운 작성법이랑 이것저것 알아보면서 저처럼정적 페이지 블로그 생성을 필요하신 분을 위해 글을 한번 써봤습니다!~처음 글을 쓰는 거라 불편하셔도… 참아주셔요 ㅠㅠ 2) Hexo란?Hexo란 Node.js기반 정적 사이트 생성기입니다.그럼 정적 사이트 생성기란… 뭘까요?? 말 그대로 정적인 파일인 HTML, CSS, Javascript, image파일 등을 서버에 올리는 방식을 말합니다.(제가 이해한 것에 의하면요…)정적으로 올린다면 서버 부하나(트래픽 많아질 경우) 서버 운영에 대해서 신경 안써도 된다는게 장점인 듯! GitHub Pages를 이용한 블로그 프레임 워크에는 크게 3가지가 있습니다. 1. Jekyll Ruby 기반 이용자 수가 많음(한마디로 레퍼런스나 데이터가 많음) window는 지원되는 플랫폼이 아님(Ubuntu 최적화) 2. Hugo Go 기반 Build Time 빠르다(런타임 의존성이 없기 때문) 영어 기반 레퍼런스가 많다(영어 공부 할 기회!!) 3. Hexo Node.js 기반 window 지원 이렇게 보고나니.. Node.js를 자주 사용하는 저로써 선택은 하나뿐입니다. Hexo 너로 정했따!!!3) Hexo 설치먼저 Hexo가 Node.js 기반이기 때문에 Node.js 와 해당 기반의 패키지 관리및 배포를 해주는npm 설치가 필요합니다. Node.js + npm 설치 https://nodejs.org/en/download(Node.js 설치를 하면 당연히 npm이 따라 오쥬)~ Git 레퍼지토리 생성(로컬 서버에서는 필요없음) *필자의 환경 OS : Window Node.js : v10.15.3 npm : v6.4.1 1234567891011$ npm install hexo-cli -g --save# hexo-cli를 설치# global(-g) 즉, 전역으로 설치하여 어떤 위치에서든 이용가능!$ hexo init hexoblog# hexo init &lt;디렉토리명&gt; -&gt; Hexo 초기화 작업# hexo 기본 프로젝트를 생성합니다.$ cd hexoblog$ npm install # 기본 패키시 생성(node_modules) 위와같이 명령어를 입력해주면 아래처럼 리스트가 생성됩니다. 12345678├─_config.yml # 페이지 설정 파일├─ package.json # 어플리케이션 데이터 파일├─ scaffolds # 생성시 참조되는 레이아웃 폴더 [page.md, post.md, draft.md]├─ source # html 파일로 변환되어 public/ 폴더로 이동할 웹 사이트 컨텐츠(.md) 위치| ├─ _drafts # draft 레이아웃 사용시 위치하며 generate 명령어 실행시 제외 됨(초안 문서) # publish 명령어로 source/_posts/로 이동| └─ _posts # generate 명령어로 public/ 폴더로 이동└─ themes # 테마 설치 위치 이렇게 Hexo 설치와 기본적으로 프로젝트를 설치했으면 테스트를 돌려야하지 않겠습니까?? 12345hexo serve -o # output(-o) 브라우저에 자동으로 접속 # orhexo serve ## orhexo s #약자 사용도 됩니다. 로컬서버로 블로그를 생성했다면 확인은 http://localhost:4000 여기서 하시면 됩니다. 다음 포스트는 블로그 “테마 변경”과 “포스트 쓰기”로뵙겠습니다.","categories":[{"name":"Blog","slug":"Blog","permalink":"http://devkyun.github.io/categories/Blog/"},{"name":"Hexo","slug":"Blog/Hexo","permalink":"http://devkyun.github.io/categories/Blog/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://devkyun.github.io/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","permalink":"http://devkyun.github.io/tags/Markdown/"},{"name":"Github","slug":"Github","permalink":"http://devkyun.github.io/tags/Github/"}]},{"title":"[Node.js]","slug":"Node-js","date":"2020-03-12T08:04:36.000Z","updated":"2020-03-12T08:08:06.845Z","comments":true,"path":"2020/03/12/Node-js/","link":"","permalink":"http://devkyun.github.io/2020/03/12/Node-js/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"[AWS]","slug":"AWS","date":"2020-03-12T07:35:57.000Z","updated":"2020-03-14T07:59:02.246Z","comments":true,"path":"2020/03/12/AWS/","link":"","permalink":"http://devkyun.github.io/2020/03/12/AWS/","excerpt":"","text":"안녕하세요","categories":[{"name":"Cloud","slug":"Cloud","permalink":"http://devkyun.github.io/categories/Cloud/"},{"name":"AWS","slug":"Cloud/AWS","permalink":"http://devkyun.github.io/categories/Cloud/AWS/"}],"tags":[{"name":"aws","slug":"aws","permalink":"http://devkyun.github.io/tags/aws/"}]}]}